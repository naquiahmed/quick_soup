
-- =============================================
-- AUTHOR:      [NAME]
-- CREATE DATE: [DATE]
-- DESCRIPTION: TO REBUILD OR REORGANIZE INDEX BASED ON FRAGMENATION 
-- =============================================
CREATE PROCEDURE [dbo].[PROC_REBUILD_INDEX] 
AS
BEGIN
	SET NOCOUNT ON

	BEGIN TRY

			DECLARE @SQL_QUERY VARCHAR(8000);
			DECLARE @I INT = 1
			DECLARE @QUERY_COUNT INT
			DECLARE @LOG_ID BIGINT
			,	@PROC_NAME VARCHAR(200) = OBJECT_NAME(@@PROCID)
	
			CREATE TABLE #TABLE_LIST(TABLE_ID INT IDENTITY(1,1),SQL_STMT VARCHAR(8000))


			SET @LOG_ID = @@IDENTITY

			INSERT INTO #TABLE_LIST (SQL_STMT)
			SELECT SQL_STMT
			FROM (
					SELECT DISTINCT DBSCHEMAS.NAME AS 'SCHEMA',DBTABLES.NAME AS 'TABLE',
					CASE WHEN INDEXSTATS.AVG_FRAGMENTATION_IN_PERCENT BETWEEN 4 AND 30
							THEN 'ALTER INDEX [' + DBINDEXES.[NAME] + '] ON [' + DBSCHEMAS.[NAME] + '].[' + DBTABLES.[NAME] + '] REORGANIZE'
						 WHEN INDEXSTATS.AVG_FRAGMENTATION_IN_PERCENT > 30
							THEN 'ALTER INDEX [' + DBINDEXES.[NAME] + '] ON [' + DBSCHEMAS.[NAME] + '].[' + DBTABLES.[NAME] + '] REBUILD WITH (MAXDOP = 8, ONLINE = ON)'
						 END SQL_STMT
					FROM SYS.DM_DB_INDEX_PHYSICAL_STATS (DB_ID(), NULL, NULL, NULL, NULL) AS INDEXSTATS
					INNER JOIN SYS.TABLES DBTABLES ON DBTABLES.OBJECT_ID = INDEXSTATS.OBJECT_ID
					INNER JOIN SYS.SCHEMAS DBSCHEMAS ON DBTABLES.SCHEMA_ID = DBSCHEMAS.SCHEMA_ID
					INNER JOIN SYS.INDEXES DBINDEXES ON DBINDEXES.OBJECT_ID = INDEXSTATS.OBJECT_ID AND INDEXSTATS.INDEX_ID = DBINDEXES.INDEX_ID
					WHERE INDEXSTATS.DATABASE_ID = DB_ID() 
						AND DBSCHEMAS.NAME IN ([SCHEMA_NAME])
						AND DBINDEXES.NAME IS NOT NULL
						AND INDEXSTATS.AVG_FRAGMENTATION_IN_PERCENT > 4
				) A
			WHERE SQL_STMT IS NOT NULL

			SELECT  @QUERY_COUNT= COUNT(*) FROM #TABLE_LIST

			WHILE @I< = @QUERY_COUNT
			BEGIN
		
					SET NOCOUNT ON;
		
					SELECT @SQL_QUERY = SQL_STMT FROM #TABLE_LIST WHERE TABLE_ID = @I AND SQL_STMT IS NOT NULL
					--PRINT @SQL_QUERY
					
					UPDATE	[LOG_TABLE] 
					SET		[LOG_STATUS] = 'IP: '+ LEFT(REPLACE(@SQL_QUERY, 'ALTER INDEX', ''), 40)
						,	[END_TIME] = GETUTCDATE()
					WHERE	[LOG_ID] = @LOG_ID
					
					EXEC (@SQL_QUERY)

					SET @I=@I+1
			
			END

				UPDATE	[LOG_TABLE]
				SET		[LOG_STATUS] = 'Success'
					,	[END_TIME] = GETUTCDATE()
				WHERE [LOG_ID] IN (@LOG_ID)
		

		END TRY

		BEGIN CATCH

			DECLARE @ErrorMessage NVARCHAR(4000);  
			DECLARE @ErrorSeverity INT;  
			DECLARE @ErrorState INT; 
		
			SELECT   
				@ErrorMessage = ERROR_MESSAGE(),  
				@ErrorSeverity = ERROR_SEVERITY(),  
				@ErrorState = ERROR_STATE();  

				UPDATE [LOG_TABLE] SET [LOG_STATUS] = 'Failure'
				WHERE [LOG_ID] IN (@LOG_ID)


		END CATCH
END